{"version":3,"file":"static/js/489.eabe5055.chunk.js","mappings":"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","sources":["components/inputs/FCSelector.jsx","components/inputs/DatePicker.jsx","pages/Home.jsx","services/XLSX.js"],"sourcesContent":["import React, { memo, useMemo, useCallback } from 'react';\r\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux'\r\nimport { styled } from '@mui/material/styles';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport { setGlobalMessage, setCurrentResult, setCurrentFc, setUploading } from \"../../modules/help\";\r\nimport * as ServerAPI from \"../../services/api\";\r\nconst StyledAutoComplete = styled(Autocomplete)(\r\n    () => ({\r\n        '& .MuiOutlinedInput-root': {\r\n            cursor: 'pointer',\r\n            '& input.MuiOutlinedInput-input': {\r\n                cursor: 'pointer',\r\n            },  \r\n        }\r\n    })\r\n)\r\n\r\nconst FCSelector = () => {\r\n  const { fcs, currentFc, fromDate, toDate } = useSelector(state => ({\r\n    fcs: state.Help.fcs,\r\n    fromDate: state.Help.fromDate,\r\n    toDate: state.Help.toDate,\r\n    currentFc: state.Help.currentFc\r\n  }), shallowEqual)\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const dispatch = useDispatch();\r\n  const options = useMemo(() => {\r\n    if(!fcs) return []\r\n    return fcs;\r\n  }, [fcs])\r\n  const onChange = useCallback(async (newValue) => {\r\n    dispatch(setCurrentFc(newValue));\r\n    dispatch(setUploading('Loading...'))\r\n    try {\r\n      const statisticsData = await ServerAPI.getResult(newValue, fromDate, toDate);\r\n      if(statisticsData['data']['status']) {\r\n          const result = statisticsData['data']['result']\r\n          if(!!result) dispatch(setCurrentResult(result))\r\n      }\r\n    }catch(error) {\r\n      dispatch(setGlobalMessage({\r\n        message: error.message,\r\n        status: false\r\n      }))\r\n    }\r\n    dispatch(setUploading(null))\r\n  }, [fromDate, toDate])\r\n  return (\r\n    <div>\r\n      <StyledAutoComplete\r\n        value={currentFc}\r\n        onChange={(event, newValue) => {\r\n          onChange(newValue)\r\n        }}\r\n        disableClearable={true}\r\n        inputValue={inputValue}\r\n        onInputChange={(event, newInputValue) => {\r\n          setInputValue(newInputValue);\r\n        }}\r\n        size=\"small\"\r\n        options={options}\r\n        sx={{ width: 250 }}\r\n        renderInput={(params) => <TextField {...params} label=\"Warehouse\" />}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default memo(FCSelector);\r\n","import React, {memo} from 'react';\r\nimport { styled } from '@mui/material';\r\nimport { grey } from '@mui/material/colors';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport DatePicker from \"react-datepicker\";\r\nconst StyledBox = styled(Box) (\r\n    ({theme}) => ({\r\n        '& input': {\r\n            padding: '10px 20px',\r\n            outline: 'none',\r\n            border: `1px solid ${grey[300]}`,\r\n            borderRadius: theme.spacing(0.5)\r\n        },\r\n        '& button': {\r\n            paddingRight: theme.spacing(1.5)\r\n        },\r\n        '& button::after': {\r\n            backgroundColor: grey[400]\r\n        }\r\n    })\r\n)\r\nconst MyDatePicker = ({value, onChange, min, max, placeholder }) => {\r\n    return (\r\n        <StyledBox>\r\n           <DatePicker\r\n                closeOnScroll={true}\r\n                selected={value}\r\n                onChange={(date) => onChange(date)}\r\n                maxDate={max}\r\n                minDate={min}\r\n                isClearable\r\n                placeholderText={placeholder}\r\n            />\r\n        </StyledBox>\r\n    )\r\n}\r\nMyDatePicker.defaultProps = {\r\n    value: null,\r\n    min: new Date('2017-01-01'),\r\n    max: new Date('2050-01-01'),\r\n    onChange: () => {},\r\n    placeholder: 'Date'\r\n}\r\nexport default memo(MyDatePicker)","import React, { memo, useCallback, useRef, useEffect, useState, useMemo } from 'react';\r\nimport { useSelector, shallowEqual, useDispatch  } from \"react-redux\";\r\nimport clsx from 'clsx';\r\nimport moment  from \"moment\";\r\nimport { debounce } from 'debounce';\r\nimport { useBottomScrollListener } from 'react-bottom-scroll-listener';\r\nimport Box from '@mui/material/Box';\r\nimport {grey} from '@mui/material/colors';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\r\nimport MainLayout from \"../layouts/MainLayout\";\r\nimport FCSelector from \"../components/inputs/FCSelector\";\r\nimport * as XlsxAPI from \"../services/XLSX\";\r\nimport DatePicker from \"../components/inputs/DatePicker\";\r\nimport { setFromDate, setToDate, setCurrentResult, setUploading, setGlobalMessage } from \"../modules/help\";\r\nimport * as ServerAPI from \"../services/api\";\r\n\r\nconst getStatistics = async (fc, from, to) => {\r\n    try {\r\n        const statisticsData = await ServerAPI.getResult(fc, from, to);\r\n        if(statisticsData['data']['status']) {\r\n            const result = statisticsData['data']['result']\r\n            return result;\r\n        }\r\n    }catch(error) {\r\n        return null;\r\n    }\r\n}\r\n\r\nconst ItemCell = memo(({header = false, label}) => {\r\n    return (\r\n        <>\r\n            {header? (\r\n                <Box sx={{ border: `1px solid ${grey[300]}`, pl: 1.5, pr: 1.5, pt: 1,  pb: 1  }}>\r\n                    <Typography variant=\"body2\" sx={{ fontWeight: 'bold', whiteSpace: 'pre' }}>\r\n                        {label}\r\n                    </Typography>\r\n                </Box>\r\n            ): (\r\n                <Box sx={{ border: `1px solid ${grey[300]}`, pl: 1.5, pr: 1.5, pt: 0.5,  pb: 0.5, }}>\r\n                    <Typography variant=\"body2\" sx={{ whiteSpace: 'pre' }}>\r\n                        {!label? ' ': label}\r\n                    </Typography>\r\n                </Box>\r\n            )}\r\n        </>\r\n        \r\n    )\r\n});\r\nconst Home = () => {\r\n    const {currentFc, fromDate, toDate, currentResult} = useSelector(state => ({\r\n        currentFc: state.Help.currentFc,\r\n        fromDate: state.Help.fromDate,\r\n        toDate: state.Help.toDate,\r\n        currentResult: state.Help.currentResult\r\n    }), shallowEqual);\r\n    const [ value, setValue ] = useState({\r\n        index: 1,\r\n        allRows: [],\r\n    })\r\n    const dispatch = useDispatch();\r\n    \r\n    useEffect(() => {\r\n        if(!!currentResult) {\r\n            const LENGTH_ARRAY = currentResult.map(el => el['array'].length);\r\n            const maxLength = Math.max(...LENGTH_ARRAY);\r\n            let tempArray = currentResult.map(el => {\r\n                const diff = maxLength - el['array'].length;\r\n                let array = [...el['array']]\r\n                for(let i = 0; i < diff; i++) {\r\n                    array.push(0)\r\n                }\r\n                return {\r\n                    ...el,\r\n                    array: [...array]\r\n                }\r\n            });\r\n            return setValue(value => ({ ...value, allRows: tempArray, index: 1 }))\r\n        }\r\n    }, [currentResult])\r\n    const results = useMemo(() => {\r\n        const {allRows, index} = value;\r\n        let rows = allRows.map(row => {\r\n            const {array} = row;\r\n            return {\r\n                ...row,\r\n                array: array.filter((el, nIndex) => !!el && nIndex < 40 * index)\r\n            }\r\n        });\r\n        return rows;\r\n    }, [value])\r\n    const onScrollBottom = debounce(() => {\r\n        setValue(value => ({ ...value, index: value['index'] + 1}))\r\n    }, 100)\r\n    const scrollRef = useBottomScrollListener(onScrollBottom);\r\n\r\n    const onDownload = useCallback(() => {\r\n        const {allRows} = value;\r\n        XlsxAPI.onDownload(allRows);\r\n    }, [value]);\r\n    const onChangeDate = useCallback((type) => async (value) => {\r\n        if(type === 'from') {\r\n            let from = null;\r\n            let to = toDate;\r\n            if(!!value) from = moment(value).format('YYYY-MM-DD')\r\n            dispatch(setFromDate(from));\r\n            if(!toDate) {\r\n                to = from;\r\n                dispatch(setToDate(to));\r\n            }\r\n            dispatch(setUploading('Loading...'))\r\n            const result = await getStatistics(currentFc, from, to);\r\n            if(!!result) dispatch(setCurrentResult(result))\r\n            dispatch(setUploading(null))\r\n        }else {\r\n            let to = null;\r\n            let from = fromDate;\r\n            if(!!value) to = moment(value).format('YYYY-MM-DD')\r\n            dispatch(setToDate(to));\r\n            if(!fromDate) {\r\n                from = to;\r\n                dispatch(setFromDate(from));\r\n            } \r\n            dispatch(setUploading('Loading...'))\r\n            const result = await getStatistics(currentFc, from, to);\r\n            if(!!result) dispatch(setCurrentResult(result))\r\n            dispatch(setUploading(null))\r\n        }\r\n    }, [toDate, fromDate, currentFc])\r\n    \r\n    const rangeDate = useMemo(() => {\r\n        let from = {\r\n            date: null,\r\n        }\r\n        let to = {\r\n            date: null,\r\n        }\r\n        if(fromDate) {\r\n            from['date'] = moment(fromDate, 'YYYY-MM-DD').toDate();\r\n            to['min'] = from['date'];\r\n        }\r\n        if(toDate) {\r\n            to['date'] = moment(toDate, 'YYYY-MM-DD').toDate();\r\n            from['max'] = to['date']\r\n        }\r\n        return {from, to}\r\n    }, [fromDate, toDate])\r\n    return (\r\n        <MainLayout>\r\n            <Box className={clsx('flex', 'justify-between')}>\r\n                <Box className={clsx('flex')}>\r\n                    <FCSelector />\r\n                    <Box sx={{pl: 3, }}>\r\n                        <DatePicker \r\n                            placeholder=\"From date\"\r\n                            onChange={onChangeDate('from')}\r\n                            value={rangeDate['from']['date']}\r\n                            max={rangeDate['to']['date']}\r\n                        />\r\n                    </Box>\r\n                    <ArrowForwardIcon sx={{ml: 2, mr: 2, color: grey[500]}} />\r\n                    <DatePicker \r\n                        placeholder=\"To date\"\r\n                        onChange={onChangeDate('to')}\r\n                        value={rangeDate['to']['date']}\r\n                        min={rangeDate['from']['date']}\r\n                    />\r\n                </Box>\r\n                <Button variant=\"contained\" onClick={onDownload}>\r\n                    Download xlsx\r\n                </Button>\r\n            </Box>\r\n            <Box sx={{pt: 2}}></Box>\r\n            <Box sx={{ overflow: 'auto', pb: 1}} ref={scrollRef}>\r\n                <Box className={clsx('flex-only')} sx={{pr: 2}}  >\r\n                    {results.map((excel, index) => (\r\n                        <Box key={`excel_${index}`}>\r\n                            <ItemCell label={excel['label']} header={true} />\r\n                            {excel['array'].map((el, nIndex) => (\r\n                                <ItemCell label={el} key={`el_${index}_${nIndex}`} />\r\n                            ))}\r\n                        </Box>\r\n                    ))}\r\n                </Box>\r\n            </Box>\r\n        </MainLayout>\r\n    )\r\n}\r\nexport default memo(Home)","import * as XLSX from 'xlsx-js-style';\r\nimport moment from \"moment\";\r\n\r\nexport const onDownload = (excels) => {\r\n    const workbook = XLSX.utils.book_new();\r\n    const rows = [];\r\n    const colLength = excels[0]['array'].length;\r\n    let titleRow = excels.map(el => (\r\n        { v: ` ${el['label']} `, t: \"s\", s: { font: { bold: true, sz: 13 } } }\r\n    ))\r\n    rows.push(titleRow);\r\n    const rowLength = titleRow.length;\r\n    for(let i = 0; i < colLength; i++) {\r\n        let row = [];\r\n        for(let j = 0; j < rowLength; j++) {\r\n            const element = excels[j]['array'][i];\r\n            if(element === 0) {\r\n                row.push({ v: ``, t: \"s\", s: { font: { sz: 13 } } })\r\n            }else {\r\n                row.push({ v: element, t: \"s\", s: { font: { sz: 13 } } })\r\n            }\r\n        }\r\n        rows.push(row)\r\n    }\r\n    console.log(rows)\r\n    const ws = XLSX.utils.aoa_to_sheet(rows);\r\n    XLSX.utils.book_append_sheet(workbook, ws);\r\n    XLSX.writeFile(workbook, `${moment().format('MM-DD-HH-mm')}.xlsx`,  {cellStyles: true});\r\n}"],"names":["StyledAutoComplete","styled","Autocomplete","cursor","FCSelector","useSelector","state","fcs","Help","fromDate","toDate","currentFc","shallowEqual","React","inputValue","setInputValue","dispatch","useDispatch","options","useMemo","onChange","useCallback","newValue","setCurrentFc","setUploading","ServerAPI","statisticsData","result","setCurrentResult","setGlobalMessage","message","status","value","event","disableClearable","onInputChange","newInputValue","size","sx","width","renderInput","params","TextField","label","memo","StyledBox","Box","theme","padding","outline","border","grey","borderRadius","spacing","paddingRight","backgroundColor","MyDatePicker","min","max","placeholder","closeOnScroll","selected","date","maxDate","minDate","isClearable","placeholderText","defaultProps","Date","getStatistics","fc","from","to","ItemCell","header","pl","pr","pt","pb","Typography","variant","fontWeight","whiteSpace","Home","currentResult","useState","index","allRows","setValue","useEffect","LENGTH_ARRAY","map","el","length","maxLength","Math","tempArray","diff","array","i","push","results","row","filter","nIndex","onScrollBottom","debounce","scrollRef","useBottomScrollListener","onDownload","excels","workbook","XLSX","rows","colLength","titleRow","v","t","s","font","bold","sz","rowLength","j","element","console","log","ws","moment","format","cellStyles","XlsxAPI","onChangeDate","type","setFromDate","setToDate","rangeDate","MainLayout","className","clsx","DatePicker","ArrowForward","ml","mr","color","Button","onClick","overflow","ref","excel"],"sourceRoot":""}