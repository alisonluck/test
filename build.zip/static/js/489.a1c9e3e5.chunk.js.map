{"version":3,"file":"static/js/489.a1c9e3e5.chunk.js","mappings":"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","sources":["components/inputs/FCSelector.jsx","components/inputs/DatePicker.jsx","pages/Home.jsx","services/XLSX.js"],"sourcesContent":["import React, { memo, useMemo, useCallback } from 'react';\r\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux'\r\nimport { styled } from '@mui/material/styles';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport { setCurrentFc } from \"../../modules/help\";\r\nconst StyledAutoComplete = styled(Autocomplete)(\r\n    () => ({\r\n        '& .MuiOutlinedInput-root': {\r\n            cursor: 'pointer',\r\n            '& input.MuiOutlinedInput-input': {\r\n                cursor: 'pointer',\r\n            },  \r\n        }\r\n    })\r\n)\r\n\r\nconst FCSelector = () => {\r\n  const {fcs, currentFc} = useSelector(state => ({\r\n    fcs: state.Help.fcs,\r\n    currentFc: state.Help.currentFc\r\n  }), shallowEqual)\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const dispatch = useDispatch();\r\n  const options = useMemo(() => {\r\n    if(!fcs) return []\r\n    let array = fcs.map(el => el['name']);\r\n    array = [ ...new Set(array)]\r\n    array = ['All'].concat(array);\r\n    return array;\r\n  }, [fcs])\r\n  const onChange = useCallback((newValue) => {\r\n    dispatch(setCurrentFc(newValue))\r\n  }, [])\r\n  return (\r\n    <div>\r\n      <StyledAutoComplete\r\n        value={currentFc}\r\n        onChange={(event, newValue) => {\r\n          onChange(newValue)\r\n        }}\r\n        disableClearable={true}\r\n        inputValue={inputValue}\r\n        onInputChange={(event, newInputValue) => {\r\n          setInputValue(newInputValue);\r\n        }}\r\n        size=\"small\"\r\n        options={options}\r\n        sx={{ width: 250 }}\r\n        renderInput={(params) => <TextField {...params} label=\"Warehouse\" />}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default memo(FCSelector);\r\n","import React, {memo} from 'react';\r\nimport { styled } from '@mui/material';\r\nimport { grey } from '@mui/material/colors';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport DatePicker from \"react-datepicker\";\r\nconst StyledBox = styled(Box) (\r\n    ({theme}) => ({\r\n        '& input': {\r\n            padding: '10px 20px',\r\n            outline: 'none',\r\n            border: `1px solid ${grey[300]}`,\r\n            borderRadius: theme.spacing(0.5)\r\n        },\r\n        '& button': {\r\n            paddingRight: theme.spacing(1.5)\r\n        },\r\n        '& button::after': {\r\n            backgroundColor: grey[400]\r\n        }\r\n    })\r\n)\r\nconst MyDatePicker = ({value, onChange, min, max, placeholder }) => {\r\n    return (\r\n        <StyledBox>\r\n           <DatePicker\r\n                closeOnScroll={true}\r\n                selected={value}\r\n                onChange={(date) => onChange(date)}\r\n                maxDate={max}\r\n                minDate={min}\r\n                isClearable\r\n                placeholderText={placeholder}\r\n            />\r\n        </StyledBox>\r\n    )\r\n}\r\nMyDatePicker.defaultProps = {\r\n    value: null,\r\n    min: new Date('2017-01-01'),\r\n    max: new Date('2050-01-01'),\r\n    onChange: () => {},\r\n    placeholder: 'Date'\r\n}\r\nexport default memo(MyDatePicker)","import React, { memo, useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { useSelector, shallowEqual, useDispatch  } from \"react-redux\";\r\nimport clsx from 'clsx';\r\nimport moment  from \"moment\";\r\nimport Box from '@mui/material/Box';\r\nimport {grey} from '@mui/material/colors';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForward';\r\nimport MainLayout from \"../layouts/MainLayout\";\r\nimport FCSelector from \"../components/inputs/FCSelector\";\r\nimport * as XlsxAPI from \"../services/XLSX\";\r\nimport { getStatistics } from \"../utils/calulator\";\r\nimport DatePicker from \"../components/inputs/DatePicker\";\r\n\r\nimport { setFromDate, setToDate } from \"../modules/help\";\r\n\r\nconst ItemCell = memo(({header = false, label}) => {\r\n    return (\r\n        <>\r\n            {header? (\r\n                <Box sx={{ border: `1px solid ${grey[300]}`, pl: 1.5, pr: 1.5, pt: 1,  pb: 1  }}>\r\n                    <Typography variant=\"body2\" sx={{ fontWeight: 'bold', whiteSpace: 'pre' }}>\r\n                        {label}\r\n                    </Typography>\r\n                </Box>\r\n            ): (\r\n                <Box sx={{ border: `1px solid ${grey[300]}`, pl: 1.5, pr: 1.5, pt: 0.5,  pb: 0.5, }}>\r\n                    <Typography variant=\"body2\" sx={{ whiteSpace: 'pre' }}>\r\n                        {!label? ' ': label}\r\n                    </Typography>\r\n                </Box>\r\n            )}\r\n        </>\r\n        \r\n    )\r\n});\r\nconst Home = () => {\r\n    const {products, currentFc, fromDate, toDate} = useSelector(state => ({\r\n        products: state.Help.products,\r\n        currentFc: state.Help.currentFc,\r\n        fromDate: state.Help.fromDate,\r\n        toDate: state.Help.toDate\r\n    }), shallowEqual);\r\n    const [results, setResults] = useState([]);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if(!!products) {\r\n            let EXCELS = getStatistics(products, currentFc, fromDate, toDate)\r\n            const LENGTH_ARRAY = EXCELS.map(el => el['array'].length);\r\n            const maxLength = Math.max(...LENGTH_ARRAY);\r\n            let tempArray = EXCELS.map(el => {\r\n                const diff = maxLength - el['array'].length;\r\n                let array = [...el['array']]\r\n                for(let i = 0; i < diff; i++) {\r\n                    array.push(0)\r\n                }\r\n                return {\r\n                    ...el,\r\n                    array: [...array]\r\n                }\r\n            })\r\n            setResults(tempArray)\r\n        }\r\n    }, [currentFc, products, fromDate, toDate])\r\n    const onDownload = useCallback(() => {\r\n        XlsxAPI.onDownload(results);\r\n    }, [results]);\r\n    const onChangeDate = useCallback((type) => (value) => {\r\n        if(type === 'from') {\r\n            let data = null;\r\n            if(!!value) data = moment(value).format('YYYY-MM-DD')\r\n            dispatch(setFromDate(data));\r\n            if(!toDate) dispatch(setToDate(data))\r\n        }else {\r\n            let data = null;\r\n            if(!!value) data = moment(value).format('YYYY-MM-DD')\r\n            dispatch(setToDate(data));\r\n            if(!fromDate) dispatch(setFromDate(data));\r\n        }\r\n    }, [toDate, fromDate])\r\n    \r\n    const rangeDate = useMemo(() => {\r\n        \r\n        let from = {\r\n            date: null,\r\n        }\r\n        let to = {\r\n            date: null,\r\n        }\r\n        if(fromDate) {\r\n            from['date'] = moment(fromDate, 'YYYY-MM-DD').toDate();\r\n            to['min'] = from['date'];\r\n        }\r\n        if(toDate) {\r\n            to['date'] = moment(toDate, 'YYYY-MM-DD').toDate();\r\n            from['max'] = to['date']\r\n        }\r\n        return {from, to}\r\n    }, [fromDate, toDate])\r\n    return (\r\n        <MainLayout>\r\n            <Box className={clsx('flex', 'justify-between')}>\r\n                <Box className={clsx('flex')}>\r\n                    <FCSelector />\r\n                    <Box sx={{pl: 3, }}>\r\n                        <DatePicker \r\n                            placeholder=\"From date\"\r\n                            onChange={onChangeDate('from')}\r\n                            value={rangeDate['from']['date']}\r\n                            max={rangeDate['to']['date']}\r\n                        />\r\n                    </Box>\r\n                    <ArrowForwardIcon sx={{ml: 2, mr: 2, color: grey[500]}} />\r\n                    <DatePicker \r\n                        placeholder=\"To date\"\r\n                        onChange={onChangeDate('to')}\r\n                        value={rangeDate['to']['date']}\r\n                        min={rangeDate['from']['date']}\r\n                    />\r\n                </Box>\r\n                <Button variant=\"contained\" onClick={onDownload}>\r\n                    Download xlsx\r\n                </Button>\r\n            </Box>\r\n            <Box sx={{pt: 2}}></Box>\r\n            <Box sx={{ overflow: 'auto', pb: 1}}>\r\n                <Box className={clsx('flex-only')} sx={{pr: 2}}>\r\n                    {results.map((excel, index) => (\r\n                        <Box key={`excel_${index}`}>\r\n                            <ItemCell label={excel['label']} header={true} />\r\n                            {excel['array'].map((el, nIndex) => (\r\n                                <ItemCell label={el} key={`el_${index}_${nIndex}`} />\r\n                            ))}\r\n                        </Box>\r\n                    ))}\r\n                </Box>\r\n            </Box>\r\n        </MainLayout>\r\n    )\r\n}\r\nexport default memo(Home)","import * as XLSX from 'xlsx-js-style';\r\nimport moment from \"moment\";\r\n\r\nexport const onDownload = (excels) => {\r\n    const workbook = XLSX.utils.book_new();\r\n    const rows = [];\r\n    const colLength = excels[0]['array'].length;\r\n    let titleRow = excels.map(el => (\r\n        { v: ` ${el['label']} `, t: \"s\", s: { font: { bold: true, sz: 13 } } }\r\n    ))\r\n    rows.push(titleRow);\r\n    const rowLength = titleRow.length;\r\n    for(let i = 0; i < colLength; i++) {\r\n        let row = [];\r\n        for(let j = 0; j < rowLength; j++) {\r\n            const element = excels[j]['array'][i];\r\n            if(element === 0) {\r\n                row.push({ v: ``, t: \"s\", s: { font: { sz: 13 } } })\r\n            }else {\r\n                row.push({ v: element, t: \"s\", s: { font: { sz: 13 } } })\r\n            }\r\n        }\r\n        rows.push(row)\r\n    }\r\n    console.log(rows)\r\n    const ws = XLSX.utils.aoa_to_sheet(rows);\r\n    XLSX.utils.book_append_sheet(workbook, ws);\r\n    XLSX.writeFile(workbook, `${moment().format('MM-DD-HH-mm')}.xlsx`,  {cellStyles: true});\r\n}"],"names":["StyledAutoComplete","styled","Autocomplete","cursor","FCSelector","useSelector","state","fcs","Help","currentFc","shallowEqual","React","inputValue","setInputValue","dispatch","useDispatch","options","useMemo","array","map","el","Set","concat","onChange","useCallback","newValue","setCurrentFc","value","event","disableClearable","onInputChange","newInputValue","size","sx","width","renderInput","params","TextField","label","memo","StyledBox","Box","theme","padding","outline","border","grey","borderRadius","spacing","paddingRight","backgroundColor","MyDatePicker","min","max","placeholder","closeOnScroll","selected","date","maxDate","minDate","isClearable","placeholderText","defaultProps","Date","ItemCell","header","pl","pr","pt","pb","Typography","variant","fontWeight","whiteSpace","Home","products","fromDate","toDate","useState","results","setResults","useEffect","EXCELS","getStatistics","LENGTH_ARRAY","length","maxLength","Math","tempArray","diff","i","push","onDownload","excels","workbook","XLSX","rows","colLength","titleRow","v","t","s","font","bold","sz","rowLength","row","j","element","console","log","ws","moment","format","cellStyles","XlsxAPI","onChangeDate","type","data","setFromDate","setToDate","rangeDate","from","to","MainLayout","className","clsx","DatePicker","ArrowForward","ml","mr","color","Button","onClick","overflow","excel","index","nIndex"],"sourceRoot":""}